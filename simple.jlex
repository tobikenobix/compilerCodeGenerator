import java_cup.runtime.*; // defines the Symbol class

// The generated scanner will return a Symbol for each token that it finds.
// A Symbol contains an Object field named value; that field will be of type
// TokenVal, defined below.
//
// A TokenVal object contains the line number on which the token occurs as
// well as the number of the character on that line that starts the token.
// Some tokens (e.g., literals) also include the value of the token.

class TokenVal {
 // fields
    int linenum;
    int charnum;
 // constructor
    TokenVal(int l, int c) {
        linenum = l;
	charnum = c;
    }
}

class IntLitTokenVal extends TokenVal {
 // new field: the value of the integer literal
    int intVal;
 // constructor
    IntLitTokenVal(int l, int c, int val) {
        super(l,c);
	intVal = val;
    }
}

class StringTokenVal extends TokenVal {
	//class for String values that need to be safed
	String stringVal;
	StringTokenVal(int l, int c, String val) {
		super(l,c);
		stringVal = val;
	}
}

class IdTokenVal extends TokenVal {
    String idVal;
    IdTokenVal(int l, int c, String str) {
        super(l,c);
        idVal = str;
    }
}


// The following class is used to keep track of the character number at which
// the current token starts on its line.
class CharNum {
  static int num=1;
}
%%
DIGIT=		[0-9]
INT=		{DIGIT}
WHITESPACE=	[\ \t]
NEWLINE= [\r|\n|\r\n]
RESERVED_WORDS= String|System.out.println|boolean|class|do|else|false|if|int|public|return|static|true|void|while|case|switch|default
IDENTIFIER= [a-zA-Z][a-zA-Z0-9_]*
STRING_LITERAL= \"([^\\\"\n]|\\[ntr\"\\])*\" 
COMMENT_SINGLE_LINE= \/\/.*
SYMBOLS= \{|\}|\(|\)|,|=|;|\+|-|\*\*|\*|\/|\!|&&|\|\||==|\!=|>|<|<=|>=|:


// The next 3 lines are included so that we can use the generated scanner
// with java CUP (the Java parser generator)
%implements java_cup.runtime.Scanner
%function next_token
%type java_cup.runtime.Symbol

// Tell JLex what to do on end-of-file
%eofval{
return new Symbol(sym.EOF);
%eofval}

// Turn on line counting
%line
%init{
	yybegin( NORMAL );
%init}
%state NORMAL COMMENT STRING

%%
<NORMAL> {

"/*"	{ yybegin( COMMENT );}
// removed -? to avoid ambiguity with the minus operator 
{INT}+   {
	    try {
        int parsedInt = Integer.parseInt(yytext());
        Symbol S = new Symbol(sym.INTLITERAL,
                              new IntLitTokenVal(yyline+1, CharNum.num, parsedInt));
        CharNum.num += yytext().length();
        return S;
    } catch (NumberFormatException e) {
        Errors.fatal(yyline+1, CharNum.num,
                     "Overflow! INTEGER TO LARGE - YOU HAVE TO COMPLY TO THE STANDARDS! THIS IS YOUR VERY BAD NUMBER: " + yytext());
        CharNum.num += yytext().length();
    }
	}

{WHITESPACE}+  {CharNum.num += yytext().length();}

{NEWLINE} {CharNum.num = 1;}

{RESERVED_WORDS} {
	try{
	String reserved_word = yytext();
	int symb;
	switch(reserved_word) {
		case "String": symb = sym.STRING; break;
		case "System.out.println": symb = sym.PRINT; break;
		case "boolean": symb = sym.BOOLEAN; break;
		case "class": symb = sym.CLASS; break;
		case "do": symb = sym.DO; break;
		case "else": symb = sym.ELSE; break;
		case "false": symb = sym.FALSE; break;
		case "if": symb = sym.IF; break;
		case "int": symb = sym.INT; break;
		case "public": symb = sym.PUBLIC; break;
		case "return": symb = sym.RETURN; break;
		case "static": symb = sym.STATIC; break;
		case "true": symb = sym.TRUE; break;
		case "void": symb = sym.VOID; break;
		case "while": symb = sym.WHILE; break;
		case "case": symb = sym.CASE; break;
		case "switch": symb = sym.SWITCH; break;
		case "default": symb = sym.DEFAULT; break;
		default: throw new IllegalStateException("Illegal Reserved Word");
	}
	Symbol S = new Symbol(symb, new TokenVal(yyline+1, CharNum.num));
	CharNum.num += yytext().length();
	return S;
	} catch (IllegalStateException e) {
		Errors.fatal(yyline+1, CharNum.num, "Illegal Reserved Word");
	}
}
{COMMENT_SINGLE_LINE} {
	CharNum.num = 1;
}

{IDENTIFIER}	{
		Symbol S = new Symbol(sym.ID, new IdTokenVal(yyline+1, CharNum.num, yytext()));
		CharNum.num += yytext().length();
		return S;
	}
{STRING_LITERAL} {
	//String literal = yytext().substring(1, yytext().length() - 1);
	String literal = yytext();
	literal = literal.replace("\\n", "\n");
	literal = literal.replace("\\t", "\t");
	literal = literal.replace("\\r", "\r");
	Symbol S = new Symbol(sym.STRINGLITERAL, new StringTokenVal(yyline+1, CharNum.num, literal));
	CharNum.num = yytext().length();
	return S;
}

{SYMBOLS} {
	try{
	String symbol = yytext();
	int symb; //aaaaahhh should have thought about naming when doing the reserved words, no keeping it for continuity
	switch(symbol) {
		case "{": symb = sym.LCURLY;break;
		case "}": symb = sym.RCURLY;break;
		case "(": symb = sym.LPAREN;break;
		case ")": symb = sym.RPAREN;break;
		case ":": symb = sym.COLON;break;
		case ",": symb = sym.COMMA; break;
		case "=": symb = sym.ASSIGN; break;
		case ";": symb = sym.SEMICOLON; break;
		case "+": symb = sym.PLUS; break;
		case "-": symb = sym.MINUS; break;
		case "**": symb = sym.POWER; break;
		case "*": symb = sym.TIMES; break;
		case "/": symb = sym.DIVIDE; break;
		case "!": symb = sym.NOT; break;
		case "&&": symb = sym.AND; break;
		case "||": symb = sym.OR; break;
		case "==": symb = sym.EQUALS; break;
		case "!=": symb = sym.NOTEQUALS; break;
		case "<": symb = sym.LESS;break;
		case ">": symb = sym.GREATER; break;
		case "<=": symb = sym.LESSEQ; break;
		case ">=": symb = sym.GREATEREQ; break;
		default: throw new IllegalStateException("Illegal Symbol!");
	}
	Symbol S = new Symbol(symb, new TokenVal(yyline+1, CharNum.num));
	CharNum.num += yytext().length();
	return S;
	} catch (IllegalStateException e){
		Errors.fatal(yyline+1, CharNum.num, "Illegal Symbol!");
	}	
}

	    
.	   {Errors.fatal(yyline+1, CharNum.num,
			 "ignoring illegal character: " + yytext());
	    CharNum.num++;
	   }
}
<COMMENT> {
	"*/" { yybegin( NORMAL );}
	{NEWLINE} {}
	.	{}
}