	 .data
_true: .asciiz "true"
_false: .asciiz "false"
_.newline: .asciiz "\n"
.data
yeaha:  .word 0		#global static variable
.text
.globl yeaha		#global var
.data
sup:  .word 0		#global static variable
.text
.globl sup		#global var
.globl test2
		# FUNCTION ENTRY test2
test2:
	sw    $ra, 0($sp)		#PUSH
	subu  $sp, $sp, 4
	sw    $fp, 0($sp)		#PUSH
	subu  $sp, $sp, 4
	addu  $fp, $sp, 8
		#  STATEMENTS
	lw    $a0, 4($fp)		#load local variable what
	li    $v0, 1
	syscall
	la    $a0, _.newline
	li    $v0, 4
	syscall
	lw    $a0, 8($fp)		#load local variable number
	li    $v0, 1
	syscall
	la    $a0, _.newline
	li    $v0, 4
	syscall
	lw    $a0, 12($fp)		#load local variable x
	li    $v0, 1
	syscall
	la    $a0, _.newline
	li    $v0, 4
	syscall
	lw    $a0, 16($fp)		#load local variable word
	li    $v0, 4
	syscall
	la    $a0, _.newline
	li    $v0, 4
	syscall
.test2_Exit:		# FUNCTION EXIT
	lw    $ra, 0($fp)		#restore ra
	move  $sp, $fp		#restore SP
	lw    $fp, -4($fp)		#restore FP
	jr    $ra		#return to caller
.globl main
		# FUNCTION ENTRY main
main:
	sw    $ra, 0($sp)		#PUSH
	subu  $sp, $sp, 4
	sw    $fp, 0($sp)		#PUSH
	subu  $sp, $sp, 4
	addu  $fp, $sp, 8
		#  STATEMENTS
.data
._L0:  .asciiz "meins"		#String Literal
.text
	la    $a0, ._L0
	sw    $a0, 0($sp)		#PUSH
	subu  $sp, $sp, 4
.data
._L1:  .word 1		#Integer Literal
.text
	lw    $a0, ._L1
	sw    $a0, 0($sp)		#PUSH
	subu  $sp, $sp, 4
.data
._L2:  .word 2		#Integer Literal
.text
	lw    $a0, ._L2
	sw    $a0, 0($sp)		#PUSH
	subu  $sp, $sp, 4
.data
._L3:  .word 3		#Integer Literal
.text
	lw    $a0, ._L3
	sw    $a0, 0($sp)		#PUSH
	subu  $sp, $sp, 4
	jal   test2		#call method
.main_Exit:		# FUNCTION EXIT
	lw    $ra, 0($fp)		#restore ra
	move  $sp, $fp		#restore SP
	lw    $fp, -4($fp)		#restore FP
	jr    $ra		#return to caller
