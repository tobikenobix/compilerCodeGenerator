	 .data
_true: .asciiz "true"
_false: .asciiz "false"
_.newline: .asciiz "\n"
.data
yeaha:  .word 0		#global static variable
.text
.globl yeaha		#global var
.data
sup:  .word 0		#global static variable
.text
.globl sup		#global var
.globl returner
		# FUNCTION ENTRY returner
returner:
	sw    $ra, 0($sp)		#PUSH
	subu  $sp, $sp, 4
	sw    $fp, 0($sp)		#PUSH
	subu  $sp, $sp, 4
	addu  $fp, $sp, 8
	subu  $sp, $sp, 8
		#  STATEMENTS
.data
._L1:  .word 3		#Integer Literal
.text
	lw    $a0, ._L1
	sw    $a0, 24($fp)		#store value of local varb
.data
._L2:  .word 2		#Integer Literal
.text
	lw    $a0, ._L2
	sw    $a0, 20($fp)		#store value of local vara
.data
._L3:  .word 5		#Integer Literal
.text
	lw    $a0, ._L3
	sw    $a0, 32($fp)		#store value of local varp
	lw    $a0, 16($fp)		#load local variable wow
	li    $v0, 4
	syscall
	la    $a0, _.newline
	li    $v0, 4
	syscall
.data
._L4:  .asciiz "hi"		#String Literal
.text
	la    $a0, ._L4
	sw    $a0, 16($fp)		#store value of local varwow
.data
._L5:  .asciiz "oh oh"		#String Literal
.text
	la    $a0, ._L5
	sw    $a0, 28($fp)		#store value of local varhui
	lw    $a0, 4($fp)		#load local variable x
	sw    $a0, 0($sp)		#PUSH
	subu  $sp, $sp, 4
	lw    $a0, 8($fp)		#load local variable y
	lw    $t1, 4($sp)
	add   $a0, $t1, $a0
	addiu $sp, $sp, 4		#POP
	sw    $a0, 12($fp)		#store value of local varz
	lw    $a0, 12($fp)		#load local variable z
	sw    $a0, 0($sp)		#PUSH
	subu  $sp, $sp, 4
	lw    $a0, 24($fp)		#load local variable b
	lw    $t1, 4($sp)
	add   $a0, $t1, $a0
	addiu $sp, $sp, 4		#POP
	j     ._L0
._L0:		# FUNCTION EXIT
	lw    $ra, 0($fp)		#restore ra
	move  $sp, $fp		#restore SP
	lw    $fp, -4($fp)		#restore FP
	jr    $ra		#return to caller
.globl some
		# FUNCTION ENTRY some
some:
	sw    $ra, 0($sp)		#PUSH
	subu  $sp, $sp, 4
	sw    $fp, 0($sp)		#PUSH
	subu  $sp, $sp, 4
	addu  $fp, $sp, 8
	subu  $sp, $sp, 8
		#  STATEMENTS
.data
._L7:  .word 1		#Integer Literal
.text
	lw    $a0, ._L7
	sw    $a0, 12($fp)		#store value of local varl
.data
._L8:  .word 2		#Integer Literal
.text
	lw    $a0, ._L8
	sw    $a0, 16($fp)		#store value of local varm
.data
._L9:  .word 2		#Integer Literal
.text
	lw    $a0, ._L9
	sw    $a0, 4($fp)		#store value of local vark
.data
._L10:  .word 1		#Integer Literal
.text
	lw    $a0, ._L10
	sw    $a0, 8($fp)		#store value of local varj
	lw    $a0, 4($fp)		#load local variable k
	sw    $a0, 0($sp)		#PUSH
	subu  $sp, $sp, 4
	lw    $a0, 8($fp)		#load local variable j
	lw    $t1, 4($sp)
	add   $a0, $t1, $a0
	addiu $sp, $sp, 4		#POP
	j     ._L6
._L6:		# FUNCTION EXIT
	lw    $ra, 0($fp)		#restore ra
	move  $sp, $fp		#restore SP
	lw    $fp, -4($fp)		#restore FP
	jr    $ra		#return to caller
.globl uff
		# FUNCTION ENTRY uff
uff:
	sw    $ra, 0($sp)		#PUSH
	subu  $sp, $sp, 4
	sw    $fp, 0($sp)		#PUSH
	subu  $sp, $sp, 4
	addu  $fp, $sp, 8
	subu  $sp, $sp, 24
		#  STATEMENTS
.data
._L12:  .word 1		#Integer Literal
.text
	lw    $a0, ._L12
	sw    $a0, 4($fp)		#store value of local vara
.data
._L13:  .word 2		#Integer Literal
.text
	lw    $a0, ._L13
	sw    $a0, 8($fp)		#store value of local varb
	lw    $a0, 4($fp)		#load local variable a
	sw    $a0, 0($sp)		#PUSH
	subu  $sp, $sp, 4
	lw    $a0, 8($fp)		#load local variable b
	lw    $t1, 4($sp)
	add   $a0, $t1, $a0
	addiu $sp, $sp, 4		#POP
	sw    $a0, 12($fp)		#store value of local varc
.data
._L14:  .asciiz "welt"		#String Literal
.text
	la    $a0, ._L14
	sw    $a0, 16($fp)		#store value of local varhallo
	lw    $a0, 12($fp)		#load local variable c
	sw    $a0, 0($sp)		#PUSH
	subu  $sp, $sp, 4
	lw    $a0, 4($fp)		#load local variable a
	lw    $t1, 4($sp)
	bgt   $t1, $a0, ._L17		#Check if greater
	li    $a0, 0		#Load false
	j     ._L18		#Jump to end, it's not greater
._L17:		# True Label, in case greater
	li    $a0, -1		#Load true
._L18:		# End of greater
	li    $t1, -1		#Load to comapre if true
	bne   $a0, $t1, ._L15		#If Statement
		#  STATEMENTS
	lw    $a0, 4($fp)		#load local variable a
	li    $v0, 1
	syscall
	la    $a0, _.newline
	li    $v0, 4
	syscall
	j     ._L16
._L15:		# Else Statement
		#  STATEMENTS
	lw    $a0, 16($fp)		#load local variable hallo
	li    $v0, 4
	syscall
	la    $a0, _.newline
	li    $v0, 4
	syscall
._L16:		# If Else Statement End
._L11:		# FUNCTION EXIT
	lw    $ra, 0($fp)		#restore ra
	move  $sp, $fp		#restore SP
	lw    $fp, -4($fp)		#restore FP
	jr    $ra		#return to caller
.globl trivRec
		# FUNCTION ENTRY trivRec
trivRec:
	sw    $ra, 0($sp)		#PUSH
	subu  $sp, $sp, 4
	sw    $fp, 0($sp)		#PUSH
	subu  $sp, $sp, 4
	addu  $fp, $sp, 8
	subu  $sp, $sp, 8
		#  STATEMENTS
	lw    $a0, 4($fp)		#load local variable k
	sw    $a0, 0($sp)		#PUSH
	subu  $sp, $sp, 4
.data
._L22:  .word 0		#Integer Literal
.text
	lw    $a0, ._L22
	lw    $t1, 4($sp)
	bgt   $t1, $a0, ._L20		#Check if greater
	li    $a0, 0		#Load false
	j     ._L21		#Jump to end, it's not greater
._L20:		# True Label, in case greater
	li    $a0, -1		#Load true
._L21:		# End of greater
	li    $t1, -1		#Load to comapre if true
	bne   $a0, $t1, ._L23		#If Statement
		#  STATEMENTS
	lw    $a0, 4($fp)		#load local variable k
	li    $v0, 1
	syscall
	la    $a0, _.newline
	li    $v0, 4
	syscall
	lw    $a0, 4($fp)		#load local variable k
	sw    $a0, 0($sp)		#PUSH
	subu  $sp, $sp, 4
.data
._L24:  .word 1		#Integer Literal
.text
	lw    $a0, ._L24
	lw    $t1, 4($sp)
	sub   $a0, $t1, $a0		#subtract
	addiu $sp, $sp, 4		#POP
	sw    $a0, 0($sp)		#PUSH
	subu  $sp, $sp, 4
	jal   trivRec		#call method
._L23:		# If Statement End
._L19:		# FUNCTION EXIT
	lw    $ra, 0($fp)		#restore ra
	move  $sp, $fp		#restore SP
	lw    $fp, -4($fp)		#restore FP
	jr    $ra		#return to caller
.globl main
		# FUNCTION ENTRY main
main:
	sw    $ra, 0($sp)		#PUSH
	subu  $sp, $sp, 4
	sw    $fp, 0($sp)		#PUSH
	subu  $sp, $sp, 4
	addu  $fp, $sp, 8
	subu  $sp, $sp, 12
		#  STATEMENTS
.data
._L26:  .word 9		#Integer Literal
.text
	lw    $a0, ._L26
	sw    $a0, 4($fp)		#store value of local vark
.data
._L27:  .asciiz "sag mal"		#String Literal
.text
	la    $a0, ._L27
	sw    $a0, 0($sp)		#PUSH
	subu  $sp, $sp, 4
.data
._L28:  .word 1		#Integer Literal
.text
	lw    $a0, ._L28
	sw    $a0, 0($sp)		#PUSH
	subu  $sp, $sp, 4
.data
._L29:  .word 2		#Integer Literal
.text
	lw    $a0, ._L29
	sw    $a0, 0($sp)		#PUSH
	subu  $sp, $sp, 4
.data
._L30:  .word 10		#Integer Literal
.text
	lw    $a0, ._L30
	sw    $a0, 0($sp)		#PUSH
	subu  $sp, $sp, 4
	jal   returner		#call method
	li    $v0, 1
	syscall
	la    $a0, _.newline
	li    $v0, 4
	syscall
	jal   some		#call method
	li    $v0, 1
	syscall
	la    $a0, _.newline
	li    $v0, 4
	syscall
	jal   some		#call method
	jal   uff		#call method
.data
._L31:  .word 5		#Integer Literal
.text
	lw    $a0, ._L31
	sw    $a0, 0($sp)		#PUSH
	subu  $sp, $sp, 4
	jal   trivRec		#call method
._L25:		# FUNCTION EXIT
	lw    $ra, 0($fp)		#restore ra
	move  $sp, $fp		#restore SP
	lw    $fp, -4($fp)		#restore FP
	jr    $ra		#return to caller
